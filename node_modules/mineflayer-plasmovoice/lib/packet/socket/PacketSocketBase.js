"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const ByteArrayDataInput_1 = __importDefault(require("../../data/encoder/ByteArrayDataInput"));
const ByteArrayDataOutput_1 = __importDefault(require("../../data/encoder/ByteArrayDataOutput"));
const PacketUtil_1 = __importDefault(require("../../data/encoder/PacketUtil"));
const lib_1 = require("../../lib");
// magic number is used to filter packets received not from PV
const UDP_MAGIC_NUMBER = 0x4e9004e9;
class PacketSocketBase extends events_1.default {
    name;
    index;
    core;
    constructor(core, index, name) {
        super();
        this.name = name;
        this.index = index;
        this.core = core;
        this.core.packetSocketHandler.socket.on("message", (msg) => {
            const buf = new ByteArrayDataInput_1.default(new Uint8Array(msg));
            const magic_number = buf.readInt();
            if (magic_number != UDP_MAGIC_NUMBER)
                return;
            const index = buf.readByte();
            if (this.index != index)
                return;
            const secret = PacketUtil_1.default.readUUID(buf);
            const timestamp = buf.readLong();
            const data = this.deserialize(buf);
            lib_1.log.getSubLogger({ name: "Socket" }).debug(`RECEIVE ${name}`);
            lib_1.log.getSubLogger({ name: "Socket" }).silly(data);
            this.emit("packet", data);
        });
    }
    send(data) {
        const out = new ByteArrayDataOutput_1.default();
        out.writeInt(UDP_MAGIC_NUMBER);
        out.writeByte(this.index);
        PacketUtil_1.default.writeUUID(out, this.core.packetSocketHandler.secret);
        out.writeLong(BigInt(Date.now()));
        const raw = this.serialize(data).getBytes();
        out.writeBytes(raw);
        lib_1.log.getSubLogger({ name: "Socket" }).debug(`SEND ${this.name} (${this.core.packetSocketHandler.ip}:${this.core.packetSocketHandler.port})`);
        lib_1.log.getSubLogger({ name: "Socket" }).silly(data);
        this.core.packetSocketHandler.socket.send(out.getBytes());
    }
}
exports.default = PacketSocketBase;
