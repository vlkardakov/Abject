"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PacketUtil_1 = __importDefault(require("../../data/encoder/PacketUtil"));
const CodecInfo_1 = require("../../data/encoder/obj/CodecInfo");
const VoicePlayerInfo_1 = require("../../data/encoder/obj/VoicePlayerInfo");
const ClientPacketBase_1 = __importDefault(require("./ClientPacketBase"));
class SourceInfoPacket extends ClientPacketBase_1.default {
    constructor(bot) {
        super(bot, 16, "SourceInfoPacket");
    }
    deserialize(packet) {
        const sourceType = packet.readUTF();
        const addonId = packet.readUTF();
        const id = PacketUtil_1.default.readUUID(packet);
        const hasSourceName = packet.readBoolean();
        const sourceName = hasSourceName ? packet.readUTF() : undefined;
        const state = packet.readByte();
        const hasDecoderInfo = packet.readBoolean();
        const decoderInfo = hasDecoderInfo
            ? CodecInfo_1.CodecInfo.deserialize(packet)
            : undefined;
        const stereo = packet.readBoolean();
        const lineId = PacketUtil_1.default.readUUID(packet);
        const iconVisible = packet.readBoolean();
        const angle = packet.readInt();
        const playerInfo = VoicePlayerInfo_1.VoicePlayerInfo.deserialize(packet);
        return {
            sourceType,
            addonId,
            id,
            hasSourceName,
            sourceName,
            state,
            hasDecoderInfo,
            decoderInfo,
            stereo,
            lineId,
            iconVisible,
            angle,
            playerInfo,
        };
    }
    serialize() {
        throw "Not required for client-side";
    }
}
exports.default = SourceInfoPacket;
