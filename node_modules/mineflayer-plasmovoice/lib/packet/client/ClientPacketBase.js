"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __importDefault(require("events"));
const ByteArrayDataInput_1 = __importDefault(require("../../data/encoder/ByteArrayDataInput"));
const ByteArrayDataOutput_1 = __importDefault(require("../../data/encoder/ByteArrayDataOutput"));
const lib_1 = require("../../lib");
const channelName = "plasmo:voice/v2";
class PacketClientBase extends events_1.default {
    bot;
    index;
    name;
    constructor(bot, index, name) {
        super();
        this.bot = bot;
        this.index = index;
        this.name = name;
        this.bot._client.on(channelName, (raw) => {
            const buf = new ByteArrayDataInput_1.default(new Uint8Array(raw));
            const index = buf.readByte();
            if (index != this.index)
                return;
            const data = this.deserialize(buf);
            lib_1.log.getSubLogger({ name: "Client" }).debug(`RECEIVE ${this.name}`);
            lib_1.log.getSubLogger({ name: "Client" }).silly(data);
            this.emit("packet", data);
        });
    }
    send(data) {
        lib_1.log.getSubLogger({ name: "Client" }).debug(`SEND ${this.name}`);
        lib_1.log.getSubLogger({ name: "Client" }).silly(data);
        const output = new ByteArrayDataOutput_1.default();
        const buf = Buffer.from(this.serialize(data).getBytes());
        output.writeByte(this.index);
        output.writeBytes(buf);
        this.bot._client.write("custom_payload", {
            channel: channelName,
            data: Buffer.from(output.getBytes()),
        });
    }
}
exports.default = PacketClientBase;
