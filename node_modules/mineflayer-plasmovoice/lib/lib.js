"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
const tslog_1 = require("tslog");
const Core_1 = __importDefault(require("./Core"));
const SoundConverter_1 = __importDefault(require("./SoundConverter"));
exports.log = new tslog_1.Logger({ minLevel: 4 });
class PlasmoVoice {
    bot;
    /** **PRO-USERS ONLY** */
    core;
    constructor(bot) {
        this.bot = bot;
        this.core = new Core_1.default(this.bot);
    }
    /** The method that interrupts sending audio to voice chat */
    async stopTalking() {
        return await this.core.stopTalking();
    }
    /** The belief that plasovoice is up and running */
    isLaunched() {
        return this.core.storedData.config != undefined;
    }
    /** A method that checks if audio is being sent at the moment */
    isTalking() {
        return this.core.isTalking();
    }
    /** Allows you to turn off and turn on the microphone / listening to other players */
    setState(microphoneMuted, voiceDisabled) {
        this.core.packetClientHandler.playerStatePacket.send({
            microphoneMuted: microphoneMuted,
            voiceDisabled: voiceDisabled,
        });
    }
    /** Returns a list of Activations (channels where the plugin can send an audio stream) */
    getActivations() {
        if (!this.isLaunched()) {
            throw exports.log.error("Voice chat is not loaded!");
        }
        return Array.from(this.core.storedData.config.activations).map((item) => item.name);
    }
    /** Returns the sampling rate of all sounds. By default it is `48_000` Hz */
    getSampleRate() {
        if (!this.isLaunched()) {
            throw exports.log.error("Voice chat is not loaded!");
        }
        return this.core.storedData.config.captureInfo.sampleRate;
    }
    /** Returns the default distance around the player
     * @argument activation by default is "proximity"
     */
    getDefaultDistance(activation) {
        if (!this.isLaunched()) {
            throw exports.log.error("Voice chat is not loaded!");
        }
        let activationData;
        if (activation) {
            activationData = Array.from(this.core.storedData.config.activations).find((value) => value.name == (activation ?? "proximity"));
        }
        else {
        }
        if (!activationData) {
            throw exports.log.fatal("Activations not found! Server issue?");
        }
        return activationData.defaultDistance;
    }
    /** Returns allowed distances for activation
     * @argument activation by default is "proximity"
     */
    getAllowedDistances(activation) {
        if (!this.isLaunched()) {
            throw exports.log.error("Voice chat is not loaded!");
        }
        let activationData;
        if (activation) {
            activationData = Array.from(this.core.storedData.config.activations).find((value) => value.name == (activation ?? "proximity"));
        }
        else {
            activationData = Array.from(this.core.storedData.config.activations).find((value) => value.proximity == true);
        }
        if (!activationData) {
            throw exports.log.fatal("Activations not found! Server issue?");
        }
        return activationData.distances;
    }
    async sendAudio(audio, distance, activation) {
        if (!this.isLaunched()) {
            throw exports.log.error("Voice chat is not loaded!");
        }
        if (distance &&
            !this.getAllowedDistances(activation).includes(distance)) {
            exports.log.error(new Error(`Distance ${distance} is not allowed!`));
            return;
        }
        if (!activation) {
            const proximity = Array.from(this.core.storedData.config.activations).find((value) => value.proximity == true);
            if (!proximity) {
                throw exports.log.fatal("Proximity activation not found! Choose something");
            }
            activation = proximity.name;
        }
        this.core.sendPCM(await SoundConverter_1.default.convertToPCM(audio, this.core.storedData.config.captureInfo.sampleRate), distance ?? this.getDefaultDistance(activation), activation);
    }
}
exports.default = PlasmoVoice;
