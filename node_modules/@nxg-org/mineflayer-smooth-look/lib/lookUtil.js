"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.yawPitchToDir = exports.EulerToDir = exports.dirToEuler = exports.targetEuler = exports.lookingAtEuler = void 0;
const THREE = __importStar(require("three"));
const vec3_1 = require("vec3");
function lookingAtEuler(yaw, pitch) {
    // clamp yaw to -PI, PI
    yaw = (yaw + Math.PI) % (2 * Math.PI);
    if (yaw < 0)
        yaw += 2 * Math.PI; // Ensure the value is within the range [-π, π]
    yaw -= Math.PI; // Shift to the range [-π, π]
    return new THREE.Euler(yaw, pitch, 0);
}
exports.lookingAtEuler = lookingAtEuler;
function targetEuler(src, dest) {
    const dir = dest.minus(src);
    return dirToEuler(dir);
}
exports.targetEuler = targetEuler;
function dirToEuler(dir) {
    const yaw = Math.atan2(-dir.x, -dir.z);
    const groundDistance = Math.sqrt(dir.x * dir.x + dir.z * dir.z);
    const pitch = Math.atan2(dir.y, groundDistance);
    return new THREE.Euler(yaw, pitch, 0);
}
exports.dirToEuler = dirToEuler;
function EulerToDir(euler) {
    return yawPitchToDir(euler.y, euler.x);
}
exports.EulerToDir = EulerToDir;
function yawPitchToDir(yaw, pitch) {
    return new vec3_1.Vec3(-Math.sin(yaw) * Math.cos(pitch), Math.sin(pitch), -Math.cos(yaw) * Math.cos(pitch));
}
exports.yawPitchToDir = yawPitchToDir;
